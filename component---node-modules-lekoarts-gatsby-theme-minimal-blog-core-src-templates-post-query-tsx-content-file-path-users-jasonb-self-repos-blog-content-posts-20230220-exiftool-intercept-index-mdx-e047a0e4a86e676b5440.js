"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[182],{4765:function(e,t,n){n.d(t,{F:function(){return g},Z:function(){return f}});var a=n(6459),o=n(7294),r=n(977),l=n(9935),i=n(1131),c=n(6799),s=n(8871),m=function(e){e.post;return null},d=n(9706),u=n(3494),p=["16px","8px","4px"].map((function(e){return"rgba(0, 0, 0, 0.1) 0px "+e+" "+e+" 0px"})),h=function(e){var t=e.data.post,n=e.children;return(0,r.tZ)(i.Z,null,(0,r.tZ)(l.X6,{as:"h1",variant:"styles.h1"},t.title),(0,r.tZ)("p",{sx:{color:"secondary",mt:3,a:{color:"secondary"},fontSize:[1,1,2]}},(0,r.tZ)("time",null,t.date),t.tags&&(0,r.tZ)(o.Fragment,null," — ",(0,r.tZ)(c.Z,{tags:t.tags})),t.timeToRead&&" — ",t.timeToRead&&(0,r.tZ)("span",null,t.timeToRead," min read")),(0,r.tZ)("section",{sx:{my:5,".gatsby-resp-image-wrapper":{my:[4,4,5],borderRadius:"4px",boxShadow:p.join(", "),".gatsby-resp-image-image":{borderRadius:"4px"}},variant:"layout.content"}},n),(0,r.tZ)(m,{post:t}))},g=function(e){var t,n,a,o=e.data.post,l=(0,u.Z)(),i=l.basePath,c=l.blogPath;return(0,r.tZ)(s.Z,{title:o.title,description:o.description?o.description:o.excerpt,image:o.banner?null===(t=o.banner)||void 0===t||null===(n=t.childImageSharp)||void 0===n||null===(a=n.resize)||void 0===a?void 0:a.src:void 0,pathname:(0,d.Z)("/"+i+"/"+c+"/"+o.slug),canonicalUrl:o.canonicalUrl})};function f(e){var t=Object.assign({},((0,a.Z)(e),e));return o.createElement(h,t)}},6799:function(e,t,n){var a=n(977),o=n(7294),r=n(1082),l=n(3494),i=n(9706);t.Z=function(e){var t=e.tags,n=(0,l.Z)(),c=n.tagsPath,s=n.basePath;return(0,a.tZ)(o.Fragment,null,t.map((function(e,t){return(0,a.tZ)(o.Fragment,{key:e.slug},!!t&&", ",(0,a.tZ)(r.Link,{sx:function(e){var t;return Object.assign({},null===(t=e.styles)||void 0===t?void 0:t.a)},to:(0,i.Z)("/"+s+"/"+c+"/"+e.slug)},e.name))})))}},8871:function(e,t,n){var a=n(7294),o=n(1082),r=n(4232);t.Z=function(e){var t=e.title,n=void 0===t?"":t,l=e.description,i=void 0===l?"":l,c=e.pathname,s=void 0===c?"":c,m=e.image,d=void 0===m?"":m,u=e.children,p=void 0===u?null:u,h=e.canonicalUrl,g=void 0===h?"":h,f=(0,r.Z)(),E=f.siteTitle,w=f.siteTitleAlt,v=f.siteUrl,b=f.siteDescription,x=f.siteImage,y=f.author,Z={title:n?n+" | "+E:w,description:i||b,url:""+v+(s||""),image:""+v+(d||x)};return a.createElement(a.Fragment,null,a.createElement("title",null,Z.title),a.createElement("meta",{name:"description",content:Z.description}),a.createElement("meta",{name:"image",content:Z.image}),a.createElement("meta",{property:"og:title",content:Z.title}),a.createElement("meta",{property:"og:url",content:Z.url}),a.createElement("meta",{property:"og:description",content:Z.description}),a.createElement("meta",{property:"og:image",content:Z.image}),a.createElement("meta",{property:"og:type",content:"website"}),a.createElement("meta",{property:"og:image:alt",content:Z.description}),a.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),a.createElement("meta",{name:"twitter:title",content:Z.title}),a.createElement("meta",{name:"twitter:url",content:Z.url}),a.createElement("meta",{name:"twitter:description",content:Z.description}),a.createElement("meta",{name:"twitter:image",content:Z.image}),a.createElement("meta",{name:"twitter:image:alt",content:Z.description}),a.createElement("meta",{name:"twitter:creator",content:y}),a.createElement("meta",{name:"gatsby-theme",content:"@lekoarts/gatsby-theme-minimal-blog"}),a.createElement("link",{rel:"icon",type:"image/png",sizes:"32x32",href:(0,o.withPrefix)("/favicon-32x32.png")}),a.createElement("link",{rel:"icon",type:"image/png",sizes:"16x16",href:(0,o.withPrefix)("/favicon-16x16.png")}),a.createElement("link",{rel:"apple-touch-icon",sizes:"180x180",href:(0,o.withPrefix)("/apple-touch-icon.png")}),g?a.createElement("link",{rel:"canonical",href:g}):null,p)}},4317:function(e,t,n){n.r(t),n.d(t,{Head:function(){return i.F},default:function(){return c}});var a=n(7294),o=n(9626);function r(e){var t=Object.assign({p:"p",a:"a",code:"code",pre:"pre",ol:"ol",li:"li"},(0,o.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.p,null,"A popular and extraordinarily thorough program for reading and writing image metadata, ",a.createElement(t.a,{href:"https://exiftool.org/"},"exiftool")," supports an interactive mode that accepts commands through stdin. This mode is useful for batching commands without the overhead of spawning a new Perl process for each command."),"\n",a.createElement(t.p,null,"The ",a.createElement(t.a,{href:"https://www.digikam.org/"},"digiKam"),", a cross platform image management and editing application, uses exiftool as one of its metadata providers, and in the beta of version 8, also supports using exiftool for writing image metadata."),"\n",a.createElement(t.p,null,"For a project that I'm working on, I wanted to log an interactive session between digiKam and exiftool. This can be accomplished without modifying either the digiKam or the exiftool source code, by introducing an additional program that sits in between, taking input on stdin, logging it, and passing it along to exiftool. As replies come back from exiftool, these too are logged, and then passed along to digiKam."),"\n",a.createElement(t.p,null,"To achieve the effect, we need to introduce a bidirectional conduit. With ",a.createElement(t.a,{href:"https://nodejs.org/"},"Node.js"),".js, we can do this with a combination of the ",a.createElement(t.code,null,"node:readline")," and ",a.createElement(t.code,null,"node:child_process")," modules:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript",title:"Require modules"},"const readline = require('node:readline');\nconst { spawn } = require('node:child_process');\n")),"\n",a.createElement(t.p,null,"First, we need to capture data from stdin. This input is line oriented, and therefore ",a.createElement(t.code,null,"node:readline")," (",a.createElement(t.a,{href:"https://nodejs.org/api/readline.html"},"docs"),") makes this easy to work with. We are exclusively interested in ",a.createElement(t.code,null,"input"),". For simplicity, I am using the callback API."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript",title:"Configure node:readline"},"  const rl = readline.createInterface({\n    input: process.stdin,\n    output: null,\n  });\n")),"\n",a.createElement(t.p,null,"Now we can spawn ",a.createElement(t.code,null,"exiftool")," as a child process, and wire up its stdin, stdout, and stderr:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript",title:"Configure sub process spawn"},"  const exiftool = spawn(exiftoolPath, args, {\n    stdio: ['pipe', 'pipe', 'pipe'],\n  });\n")),"\n",a.createElement(t.p,null,"The ",a.createElement(t.code,null,"stdio")," key accepts an array of file descriptors, and these correspond to ",a.createElement(t.code,null,"stdin"),", ",a.createElement(t.code,null,"stdout"),", and ",a.createElement(t.code,null,"stderr"),". We want access to all three steams, so we specify ",a.createElement(t.code,null,"pipe")," for each."),"\n",a.createElement(t.p,null,"Last, we want to wire up our events, so that we can log and pass data to and from the child ",a.createElement(t.code,null,"exiftool")," process:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-javascript",title:"Log and redirect output",highlight:"9,10,12,13,17,18"},"  // `fs` module required, and `logPath` defined elsewhere\n  const logAndWriteTo =\n    (handle = 'stdout') =>\n    (s) => {\n      fs.appendFileSync(logPath, `${s}`);\n      process[handle].write(s);\n    };\n\n  exiftool.on('spawn', () => { // <1>\n    rl.on('line', (cmd) => { // <2>\n      fs.appendFileSync(logPath, `${cmd}\\n`);\n      exiftool.stdin.write(cmd); // <3>\n      exiftool.stdin.write(EOL); // <3>\n    });\n  });\n\n  exiftool.stdout.on('data', (s) => logAndWriteTo('stdout')(s)); // <4>\n  exiftool.stderr.on('data', (s) => logAndWriteTo('stderr')(s)); // <4>\n")),"\n",a.createElement(t.p,null,"In the above code snippet, we setup the following:"),"\n",a.createElement(t.ol,null,"\n",a.createElement(t.li,null,"Setup an event handler that runs after the ",a.createElement(t.code,null,"exiftool")," binary successfully runs."),"\n",a.createElement(t.li,null,"Setup an event handler for ",a.createElement(t.code,null,"stdin")," where we log incoming commands to exiftool."),"\n",a.createElement(t.li,null,"Forward each command to the child process. We  make use of the ",a.createElement(t.code,null,"eol")," npm module to send a proper line ending, as readline removes this."),"\n",a.createElement(t.li,null,"We add an event handler on each of ",a.createElement(t.code,null,"exiftool.stdout")," and ",a.createElement(t.code,null,"exiftool.stderr")," to capture, and forward, output from the child process."),"\n"),"\n",a.createElement(t.p,null,"It's important to note that, the end of line termination sequence might not be a newline. Because exiftool uses a newline, this implementation is quite straightforward. But nulls or some other sequence is possible in the wild."),"\n",a.createElement(t.p,null,"The following is output from the interceptor script:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,'-stay_open,true,-@,-,-common_args,-charset,filename=UTF8,-charset,iptc=UTF8\n-json\n-G:0:1:2:4:6\n-l\n/path/to/a/file/20140220-103514.jpg\n-echo1\n{await0000000001}\n-echo2\n{await0000000001}\n-echo4\n{ready}\n-execute\n{await0000000001}\n{await0000000001}\n[{\n  "SourceFile"...\n...\n{ready}\n-stay_open\nfalse\n')),"\n",a.createElement(t.p,null,"To use this in practice, it is crucial that digiKam can actually execute the script, which is prefaced with ",a.createElement(t.code,null,"#!/usr/bin/env node")," and therefore ",a.createElement(t.code,null,"node")," must be in one of the paths in the ",a.createElement(t.code,null,"PATH")," environment variable."),"\n",a.createElement(t.p,null,"By default, ",a.createElement(t.a,{href:"https://doc.qt.io/qt-5/qstandardpaths.html#findExecutable"},"digiKam searches")," your ",a.createElement(t.code,null,"PATH")," environment variable find the ",a.createElement(t.code,null,"exiftool")," binary. However, your login shell ",a.createElement(t.code,null,"PATH")," variable might not be the same as the ",a.createElement(t.code,null,"PATH")," variable that digiKam starts with. For example, on OS X, the environment of the ",a.createElement(t.code,null,"launchd")," process is the one that digiKam starts with."),"\n",a.createElement(t.p,null,"On OS X, you can start digiKam with your shell's environment by running ",a.createElement(t.code,null,"open /Applications/digiKam.org/digikam.app"),"."),"\n",a.createElement(t.p,null,"The complete code is available from the ",a.createElement(t.a,{href:"https://github.com/jboxman/exiftool-intercept"},"exiftool-intercept")," repo on GitHub."))}var l=function(e){void 0===e&&(e={});var t=Object.assign({},(0,o.ah)(),e.components).wrapper;return t?a.createElement(t,e,a.createElement(r,e)):r(e)},i=n(4765);function c(e){return a.createElement(i.Z,e,a.createElement(l,e))}i.Z},6459:function(e,t,n){function a(e){if(null==e)throw new TypeError("Cannot destructure "+e)}n.d(t,{Z:function(){return a}})}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-users-jasonb-self-repos-blog-content-posts-20230220-exiftool-intercept-index-mdx-e047a0e4a86e676b5440.js.map