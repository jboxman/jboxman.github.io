{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-users-jasonb-self-repos-blog-content-posts-20221206-openshift-connect-index-mdx-c6c119368167adaf583a.js","mappings":"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","sources":["webpack://blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://blog/./content/posts/20221206-openshift-connect/index.mdx","webpack://blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx","webpack://blog/./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => {\n  const { basePath, blogPath } = useMinimalBlogConfig()\n\n  return (\n    <Seo\n      title={post.title}\n      description={post.description ? post.description : post.excerpt}\n      image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n      pathname={replaceSlashes(`/${basePath}/${blogPath}/${post.slug}`)}\n      canonicalUrl={post.canonicalUrl}\n    />\n  )\n}\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Once your app is ready, you excitedly deploy it to your favorite Kubernetes cluster, such as \", React.createElement(_components.a, {\n    href: \"https://www.redhat.com/en/technologies/cloud-computing/openshift\"\n  }, \"Red Hat OpenShift\"), \". Inputting the URL into the browser, you hit enter and are greeted with...\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Application is not available\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"The application is currently not serving requests at this endpoint. It may not have been started or is still starting.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Well, that's a disappointment!\"), \"\\n\", React.createElement(_components.p, null, \"Fortunately, there are some steps that we can take to determine why your app isn't available to the world.\"), \"\\n\", React.createElement(_components.p, null, \"This post makes a few assumptions about your app's deployment. In particular:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"You deployed to a Red Hat OpenShift cluster (although this is mostly applicable to any Kubernetes cluster)\"), \"\\n\", React.createElement(_components.li, null, \"You created a \", React.createElement(_components.a, {\n    href: \"https://kubernetes.io/docs/concepts/services-networking/service/\"\n  }, \"service resource\")), \"\\n\", React.createElement(_components.li, null, \"You created a \", React.createElement(_components.a, {\n    href: \"https://docs.openshift.com/container-platform/4.11/networking/routes/route-configuration.html\"\n  }, \"route resource\"), \", which is specific to OpenShift and provides ingress for HTTP traffic\"), \"\\n\", React.createElement(_components.li, null, \"You are not using any \", React.createElement(_components.a, {\n    href: \"https://kubernetes.io/docs/concepts/services-networking/network-policies/\"\n  }, \"network policies\"), \" within your project\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Our app deployment\"), \"\\n\", React.createElement(_components.p, null, \"By way of example, let's troubleshoot the \", React.createElement(_components.a, {\n    href: \"https://github.com/openshift/origin/blob/master/examples/hello-openshift/README.md\"\n  }, \"OpenShift Hello app\"), \", deployed with the following manifest. The key aspects of this manifest are as follows:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"A deployment that creates two pods that we can load balance traffic between\"), \"\\n\", React.createElement(_components.li, null, \"A service that manages our service endpoints, the two pods the deployment creates\"), \"\\n\", React.createElement(_components.li, null, \"A route that load balances incoming HTTP requests to our service endpoints\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"It is essential that the TCP ports are specified correctly. The app uses \", React.createElement(_components.code, null, \"8080\"), \" for HTTP traffic.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\",\n    title: \"App deployment configuration\",\n    highlight: \"21-23,35-37,47-49\"\n  }, \"apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: openshift-hello\\n  labels:\\n    app: ocp\\nspec:\\n  replicas: 2\\n  selector:\\n    matchLabels:\\n      app: ocp\\n  template:\\n    metadata:\\n      labels:\\n        app: ocp\\n    spec:\\n      containers:\\n      - name: openshift-hello\\n        image: openshift/hello-openshift:latest\\n        imagePullPolicy: Always\\n        ports:\\n        - containerPort: 8080\\n          protocol: TCP\\n---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: openshift-hello-svc\\n  labels:\\n    app: ocp\\nspec:\\n  selector:\\n    app: ocp\\n  ports:\\n  - port: 8080\\n    protocol: TCP\\n    targetPort: 8080\\n  type: ClusterIP\\n---\\napiVersion: route.openshift.io/v1\\nkind: Route\\nmetadata:\\n  name: hello-openshift\\n  labels:\\n    app: ocp\\nspec:\\n  host: openshift-hello.apps-crc.testing\\n  port:\\n    targetPort: 8080\\n  tls:\\n    termination: edge\\n  to:\\n    kind: Service\\n    name: openshift-hello-svc\\n    weight: 100\\n  wildcardPolicy: None\\n\")), \"\\n\", React.createElement(_components.p, null, \"And once executed, we see the following resources in our project:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-none\",\n    title: \"Output\"\n  }, \"$ oc get all -o wide\\nNAME                                   READY   STATUS    RESTARTS   AGE   IP             NODE                 NOMINATED NODE   READINESS GATES\\npod/openshift-hello-589f9c7749-rhb2p   1/1     Running   0          11h   10.217.0.232   crc-lgph7-master-0   <none>           <none>\\npod/openshift-hello-589f9c7749-wbn9l   1/1     Running   0          11h   10.217.0.236   crc-lgph7-master-0   <none>           <none>\\n\\nNAME                          TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)    AGE   SELECTOR\\nservice/openshift-hello-svc   ClusterIP   10.217.5.72   <none>        8080/TCP   11h   app=ocp\\n\\nNAME                              READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS        IMAGES                             SELECTOR\\ndeployment.apps/openshift-hello   2/2     2            2           11h   openshift-hello   openshift/hello-openshift:latest   app=ocp\\n\\nNAME                                         DESIRED   CURRENT   READY   AGE   CONTAINERS        IMAGES                             SELECTOR\\nreplicaset.apps/openshift-hello-589f9c7749   2         2         2       11h   openshift-hello   openshift/hello-openshift:latest   app=ocp,pod-template-hash=589f9c7749\\n\\nNAME                                       HOST/PORT                          PATH   SERVICES              PORT   TERMINATION   WILDCARD\\nroute.route.openshift.io/hello-openshift   openshift-hello.apps-crc.testing          openshift-hello-svc   8080   edge          None\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Our troubleshooting steps\"), \"\\n\", React.createElement(_components.p, null, \"Given the deployment described in the previous section, now we can dive into troubleshooting. We want to check for connectivity issues between each resource. In particular, we're going to look whether the app responds to an HTTP request.\"), \"\\n\", React.createElement(_components.p, null, \"We're going to answer the following questions:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Did the app start successfully?\"), \"\\n\", React.createElement(_components.li, null, \"Can I connect to an app pod through a port forward?\"), \"\\n\", React.createElement(_components.li, null, \"Can I connect to the service?\"), \"\\n\", React.createElement(_components.li, null, \"Can I connect to the route?\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In all cases, \", React.createElement(_components.code, null, \"oc\"), \" commands are executed within the \", React.createElement(_components.code, null, \"hello-openshift\"), \" namespace.\"), \"\\n\", React.createElement(_components.h3, null, \"Did the app start successfully?\"), \"\\n\", React.createElement(_components.p, null, \"For this, let's look at the logs for our app pods:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-none\",\n    title: \"Output\"\n  }, \"$ oc get pods -l app=ocp \\\\\\n  -o jsonpath='{range .items[*]}pods/{.metadata.name}{\\\"\\\\n\\\"}{end}' | \\\\\\n  xargs -L1 -I% bash -c 'echo % && oc logs %'\\npods/openshift-hello-589f9c7749-rhb2p\\nserving on 8888\\nserving on 8080\\nServicing request.\\nServicing request.\\nServicing request.\\nServicing request.\\nServicing request.\\npods/openshift-hello-589f9c7749-wbn9l\\nserving on 8888\\nserving on 8080\\nServicing request.\\n\")), \"\\n\", React.createElement(_components.p, null, \"If the app log includes any errors, these are worth investigating further.\"), \"\\n\", React.createElement(_components.h3, null, \"Can I connect to an app pod through a port forward?\"), \"\\n\", React.createElement(_components.p, null, \"For this, we can setup a port forward to an app pod and attempt to connect directly to the application, bypassing our ingress configuration.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"$ oc port-forward pods/openshift-hello-589f9c7749-rhb2p 8080\\nForwarding from 127.0.0.1:8080 -> 8080\\nForwarding from [::1]:8080 -> 8080\\n\")), \"\\n\", React.createElement(_components.p, null, \"With the forward successfully running, in a different terminal window, use the \", React.createElement(_components.code, null, \"curl\"), \" command to test connectivity. (In this example, we're using an \", React.createElement(_components.code, null, \"http://\"), \" URL because our app does not use TLS. Instead, we rely on the OpenShift ingress controller to manage TLS encryption at the \", React.createElement(_components.em, null, \"edge\"), \". This configuration is referred to as edge terminated.)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-none\",\n    title: \"Output\"\n  }, \"$ curl -v http://localhost:8080/\\n*   Trying 127.0.0.1:8080...\\n* Connected to localhost (127.0.0.1) port 8080 (#0)\\n> GET / HTTP/1.1\\n> Host: localhost:8080\\n> User-Agent: curl/7.79.1\\n> Accept: */*\\n>\\n* Mark bundle as not supporting multiuse\\n< HTTP/1.1 200 OK\\n< Date: Wed, 07 Dec 2022 23:17:43 GMT\\n< Content-Length: 17\\n< Content-Type: text/plain; charset=utf-8\\n<\\nHello OpenShift!\\n* Connection #0 to host localhost left intact\\n\")), \"\\n\", React.createElement(_components.p, null, \"And our app is reachable through the port forward.\"), \"\\n\", React.createElement(_components.h3, null, \"Can I connect to the service?\"), \"\\n\", React.createElement(_components.p, null, \"Because our original manifest created a service for this, each app pod with the label \", React.createElement(_components.code, null, \"app=ocp\"), \" is included as an endpoint for the \", React.createElement(_components.code, null, \"openshift-hello-svc\"), \" service.\"), \"\\n\", React.createElement(_components.p, null, \"By describing the service, we learn its endpoints: \", React.createElement(_components.code, null, \"10.217.0.232:8080\"), \" and \", React.createElement(_components.code, null, \"10.217.0.236:8080\"), \". And these endpoints match the IP addresses for our app pods.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-none\",\n    title: \"Output\",\n    highlight: \"14\"\n  }, \"$ oc describe services/openshift-hello-svc\\nName:              openshift-hello-svc\\nNamespace:         hello-openshift\\nLabels:            app=ocp\\nAnnotations:       <none>\\nSelector:          app=ocp\\nType:              ClusterIP\\nIP Family Policy:  SingleStack\\nIP Families:       IPv4\\nIP:                10.217.5.72\\nIPs:               10.217.5.72\\nPort:              <unset>  8080/TCP\\nTargetPort:        8080/TCP\\nEndpoints:         10.217.0.232:8080,10.217.0.236:8080\\nSession Affinity:  None\\nEvents:            <none>\\n\")), \"\\n\", React.createElement(_components.p, null, \"Or we can look at the endpoint resources in the project. The IP addresses and ports match our \", React.createElement(_components.code, null, \"openshift-hello-svc\"), \" service:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-none\",\n    title: \"Output\"\n  }, \"$ oc get endpoints\\nNAME                  ENDPOINTS                             AGE\\nopenshift-hello-svc   10.217.0.232:8080,10.217.0.236:8080   12h\\n\")), \"\\n\", React.createElement(_components.p, null, \"For this connection test, let's use a \", React.createElement(_components.a, {\n    href: \"https://github.com/nicolaka/netshoot\"\n  }, \"Netshoot\"), \" container.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-none\",\n    title: \"Output\"\n  }, \"kubectl run tmp-shell --rm -i --tty --image nicolaka/netshoot\\n\\n                    dP            dP                           dP   \\n                    88            88                           88   \\n88d888b. .d8888b. d8888P .d8888b. 88d888b. .d8888b. .d8888b. d8888P \\n88'  `88 88ooood8   88   Y8ooooo. 88'  `88 88'  `88 88'  `88   88   \\n88    88 88.  ...   88         88 88    88 88.  .88 88.  .88   88   \\ndP    dP `88888P'   dP   `88888P' dP    dP `88888P' `88888P'   dP   \\n                                                                    \\nWelcome to Netshoot! (github.com/nicolaka/netshoot)\\n\")), \"\\n\", React.createElement(_components.p, null, \"From the Netshoot container, let's confirm that we can access the cluster IP of the service, which internally routes the traffic to one of our app pods.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-none\",\n    title: \"Output\"\n  }, \"$ curl -v http://10.217.5.72:8080/ \\n*   Trying 10.217.5.72:8080...\\n* Connected to 10.217.5.72 (10.217.5.72) port 8080 (#0)\\n> GET / HTTP/1.1\\n> Host: 10.217.5.72:8080\\n> User-Agent: curl/7.86.0\\n> Accept: */*\\n> \\n* Mark bundle as not supporting multiuse\\n< HTTP/1.1 200 OK\\n< Date: Fri, 09 Dec 2022 03:39:28 GMT\\n< Content-Length: 17\\n< Content-Type: text/plain; charset=utf-8\\n< \\nHello OpenShift!\\n* Connection #0 to host 10.217.5.72 left intact\\n#\\n\")), \"\\n\", React.createElement(_components.p, null, \"Exit the shell to terminate the Netshoot pod.\"), \"\\n\", React.createElement(_components.h3, null, \"Can I connect to the route?\"), \"\\n\", React.createElement(_components.p, null, \"Finally, let's check whether we can connect to the exposed public route of our app. We can describe the route and confirm what the hostname for our app is: \", React.createElement(_components.code, null, \"openshift-hello.apps-crc.testing\"), \".\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-none\",\n    title: \"Output\",\n    highlight: \"7-8\"\n  }, \"$ oc describe routes/hello-openshift\\nName:\\t\\t\\thello-openshift\\nNamespace:\\t\\thello-openshift\\nCreated:\\t\\t20 hours ago\\nLabels:\\t\\t\\tapp=ocp\\n...\\nRequested Host:\\t\\topenshift-hello.apps-crc.testing\\n\\t\\t\\t   exposed on router default (host router-default.apps-crc.testing) 20 hours ago\\nPath:\\t\\t\\t<none>\\nTLS Termination:\\tedge\\nInsecure Policy:\\t<none>\\nEndpoint Port:\\t\\t8080\\n\\nService:\\topenshift-hello-svc\\nWeight:\\t\\t100 (100%)\\nEndpoints:\\t10.217.0.232:8080, 10.217.0.236:8080\\n\")), \"\\n\", React.createElement(_components.p, null, \"In a browser, we can visit \", React.createElement(_components.a, {\n    href: \"https://openshift-hello.apps-crc.testing/\"\n  }, \"https://openshift-hello.apps-crc.testing/\"), \" to see if the app loads. Behind the scenes, the ingress controller is handling the TLS termination and load balancing across app endpoints.\"), \"\\n\", React.createElement(_components.p, null, \"If we cannot connect successfully, on OpenShift it's \", React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/a/66563562\"\n  }, \"possible to enable logging\"), \" on the ingress controller to investigate further.\"), \"\\n\", React.createElement(_components.p, null, \"As a cluster administrator, edit the ingress controller configuration:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-none\",\n    title: \"Output\"\n  }, \"$ oc -n openshift-ingress-operator edit ingresscontrollers/default\\n\")), \"\\n\", React.createElement(_components.p, null, \"Add the \", React.createElement(_components.code, null, \"spec.logging.access.*\"), \" fields as described in the following YAML:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\",\n    title: \"Ingress controller logging configuration\"\n  }, \"apiVersion: operator.openshift.io/v1\\nkind: IngressController\\nmetadata:\\n  name: default\\n  namespace: openshift-ingress-operator\\nspec:  \\n  logging:\\n    access:\\n      destination:\\n        type: Container\\n      httpLogFormat: log_source=\\\"haproxy-default\\\" log_type=\\\"http\\\" c_ip=\\\"%ci\\\" c_port=\\\"%cp\\\" req_date=\\\"%tr\\\" fe_name_transport=\\\"%ft\\\" be_name=\\\"%b\\\" server_name=\\\"%s\\\" res_time=\\\"%TR\\\" tot_wait_q=\\\"%Tw\\\" Tc=\\\"%Tc\\\" Tr=\\\"%Tr\\\" Ta=\\\"%Ta\\\" status_code=\\\"%ST\\\" bytes_read=\\\"%B\\\" bytes_uploaded=\\\"%U\\\" captrd_req_cookie=\\\"%CC\\\" captrd_res_cookie=\\\"%CS\\\" term_state=\\\"%tsc\\\" actconn=\\\"%ac\\\" feconn=\\\"%fc\\\" beconn=\\\"%bc\\\" srv_conn=\\\"%sc\\\" retries=\\\"%rc\\\" srv_queue=\\\"%sq\\\" backend_queue=\\\"%bq\\\" captrd_req_headers=\\\"%hr\\\" captrd_res_headers=\\\"%hs\\\" http_request=\\\"%r\\\"\\n      logEmptyRequests: Log\\n\")), \"\\n\", React.createElement(_components.p, null, \"After updating the ingress controller configuration, you can tail the haproxy logs on a router pod. To list the available router pods, run the \", React.createElement(_components.code, null, \"oc get -n openshift-ingress pods\"), \" command.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-none\",\n    title: \"Output\"\n  }, \"$ oc logs -f -n openshift-ingress router-default-<id> log\\n\")), \"\\n\", React.createElement(_components.p, null, \"Ideally, if your app is accessible on the pods that it is running on and through the service, the problem lies with the ingress configuration. Troubleshooting issues with ingress is beyond the scope of this post.\"), \"\\n\", React.createElement(_components.p, null, \"For more information on the OpenShift Ingress Operator, see the \", React.createElement(_components.a, {\n    href: \"https://docs.openshift.com/container-platform/4.11/networking/ingress-operator.html\"\n  }, \"official documentation\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"While in these examples, the app is reachable at every step, you can use this approach to reveal whether a connectivity issue prevents you from connecting to your app successfully from your exposed route if you are facing an \", React.createElement(_components.em, null, \"Application is not available\"), \" error page.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/jasonb/Self/repos/blog/content/posts/20221206-openshift-connect/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nvar query = \"2040642971\";\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}"],"names":["post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","useMinimalBlogConfig","basePath","blogPath","Seo","description","excerpt","image","banner","_post$banner","childImageSharp","_post$banner$childIma","resize","_post$banner$childIma2","src","undefined","pathname","replaceSlashes","slug","canonicalUrl","MinimalBlogCorePost","props","Post","tagsPath","tag","i","key","Link","t","styles","_t$styles","to","name","site","useSiteMetadata","siteTitle","defaultTitle","siteTitleAlt","siteUrl","defaultDescription","siteDescription","defaultImage","siteImage","author","seo","url","content","property","rel","type","sizes","href","withPrefix","_createMdxContent","_components","Object","assign","p","blockquote","ul","li","h2","code","pre","h3","em","_provideComponents","components","className","highlight","MDXLayout","wrapper","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX","_objectDestructuringEmpty","obj","TypeError"],"sourceRoot":""}