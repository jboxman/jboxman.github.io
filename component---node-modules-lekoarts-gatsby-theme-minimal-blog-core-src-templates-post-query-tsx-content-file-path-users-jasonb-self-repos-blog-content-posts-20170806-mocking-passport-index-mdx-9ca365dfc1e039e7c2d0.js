"use strict";(self.webpackChunkminimal_blog=self.webpackChunkminimal_blog||[]).push([[697],{4765:function(e,t,n){n.d(t,{F:function(){return E},Z:function(){return g}});var a=n(6459),l=n(7294),r=n(977),c=n(9935),o=n(1131),s=n(6799),i=n(8871),u=function(e){e.post;return null},p=n(9706),m=n(3494),h=["16px","8px","4px"].map((function(e){return"rgba(0, 0, 0, 0.1) 0px "+e+" "+e+" 0px"})),d=function(e){var t=e.data.post,n=e.children;return(0,r.tZ)(o.Z,null,(0,r.tZ)(c.X6,{as:"h1",variant:"styles.h1"},t.title),(0,r.tZ)("p",{sx:{color:"secondary",mt:3,a:{color:"secondary"},fontSize:[1,1,2]}},(0,r.tZ)("time",null,t.date),t.tags&&(0,r.tZ)(l.Fragment,null," — ",(0,r.tZ)(s.Z,{tags:t.tags})),t.timeToRead&&" — ",t.timeToRead&&(0,r.tZ)("span",null,t.timeToRead," min read")),(0,r.tZ)("section",{sx:{my:5,".gatsby-resp-image-wrapper":{my:[4,4,5],borderRadius:"4px",boxShadow:h.join(", "),".gatsby-resp-image-image":{borderRadius:"4px"}},variant:"layout.content"}},n),(0,r.tZ)(u,{post:t}))},E=function(e){var t,n,a,l=e.data.post,c=(0,m.Z)(),o=c.basePath,s=c.blogPath;return(0,r.tZ)(i.Z,{title:l.title,description:l.description?l.description:l.excerpt,image:l.banner?null===(t=l.banner)||void 0===t||null===(n=t.childImageSharp)||void 0===n||null===(a=n.resize)||void 0===a?void 0:a.src:void 0,pathname:(0,p.Z)("/"+o+"/"+s+"/"+l.slug),canonicalUrl:l.canonicalUrl})};function g(e){var t=Object.assign({},((0,a.Z)(e),e));return l.createElement(d,t)}},6799:function(e,t,n){var a=n(977),l=n(7294),r=n(1082),c=n(3494),o=n(9706);t.Z=function(e){var t=e.tags,n=(0,c.Z)(),s=n.tagsPath,i=n.basePath;return(0,a.tZ)(l.Fragment,null,t.map((function(e,t){return(0,a.tZ)(l.Fragment,{key:e.slug},!!t&&", ",(0,a.tZ)(r.Link,{sx:function(e){var t;return Object.assign({},null===(t=e.styles)||void 0===t?void 0:t.a)},to:(0,o.Z)("/"+i+"/"+s+"/"+e.slug)},e.name))})))}},8871:function(e,t,n){var a=n(7294),l=n(1082),r=n(4232);t.Z=function(e){var t=e.title,n=void 0===t?"":t,c=e.description,o=void 0===c?"":c,s=e.pathname,i=void 0===s?"":s,u=e.image,p=void 0===u?"":u,m=e.children,h=void 0===m?null:m,d=e.canonicalUrl,E=void 0===d?"":d,g=(0,r.Z)(),f=g.siteTitle,b=g.siteTitleAlt,y=g.siteUrl,k=g.siteDescription,w=g.siteImage,v=g.author,x={title:n?n+" | "+f:b,description:o||k,url:""+y+(i||""),image:""+y+(p||w)};return a.createElement(a.Fragment,null,a.createElement("title",null,x.title),a.createElement("meta",{name:"description",content:x.description}),a.createElement("meta",{name:"image",content:x.image}),a.createElement("meta",{property:"og:title",content:x.title}),a.createElement("meta",{property:"og:url",content:x.url}),a.createElement("meta",{property:"og:description",content:x.description}),a.createElement("meta",{property:"og:image",content:x.image}),a.createElement("meta",{property:"og:type",content:"website"}),a.createElement("meta",{property:"og:image:alt",content:x.description}),a.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),a.createElement("meta",{name:"twitter:title",content:x.title}),a.createElement("meta",{name:"twitter:url",content:x.url}),a.createElement("meta",{name:"twitter:description",content:x.description}),a.createElement("meta",{name:"twitter:image",content:x.image}),a.createElement("meta",{name:"twitter:image:alt",content:x.description}),a.createElement("meta",{name:"twitter:creator",content:v}),a.createElement("meta",{name:"gatsby-theme",content:"@lekoarts/gatsby-theme-minimal-blog"}),a.createElement("link",{rel:"icon",type:"image/png",sizes:"32x32",href:(0,l.withPrefix)("/favicon-32x32.png")}),a.createElement("link",{rel:"icon",type:"image/png",sizes:"16x16",href:(0,l.withPrefix)("/favicon-16x16.png")}),a.createElement("link",{rel:"apple-touch-icon",sizes:"180x180",href:(0,l.withPrefix)("/apple-touch-icon.png")}),E?a.createElement("link",{rel:"canonical",href:E}):null,h)}},7418:function(e,t,n){n.r(t),n.d(t,{Head:function(){return o.F},default:function(){return s}});var a=n(7294),l=n(9626);function r(e){var t=Object.assign({h2:"h2",p:"p",a:"a",pre:"pre",code:"code",ul:"ul",li:"li"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.h2,null,"Introduction"),"\n",a.createElement(t.p,null,"Lately I've been exploring ",a.createElement(t.a,{href:"https://oauth.net/2/"},"OAuth"),", but how to handle functional testing? Here I'll demonstrate an approach for testing an application that uses OAuth via the popular ",a.createElement(t.a,{href:"http://passportjs.org/"},"passport middleware")," for express. When we're done, we can test routes that require authentication without making any HTTPS calls to the OAuth provider."),"\n",a.createElement(t.p,null,"Note: I'm using ",a.createElement(t.a,{href:"http://koajs.com/"},"Koa")," (and thus the ",a.createElement(t.a,{href:"koa-passport"},"koa-passport")," wrapper module), but this approach will work with ",a.createElement(t.a,{href:"https://expressjs.com/"},"Express")," with modification."),"\n",a.createElement(t.p,null,"The relevant files are shown below:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"app.js\nindex.js\nmockProfile.js\npackage.json\nnode_modules/:\n…\ntest/:\nindex.js\nutil/:\nauth.js\nmock-strategy.js\n")),"\n",a.createElement(t.p,null,"Each file serves a particular purpose:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.code,null,"app.js"),": Wrapper to bootstrap application"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"index.js"),": The application"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"mockProfile.js"),": My Github user profile data (substitute your own profile data here)"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"package.json"),": Our dependencies and scripts"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"node_modules/"),": third-party modules"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"test/index.js"),": Our tests"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"util/auth.js"),": Our authentication code"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"util/mock-strategy"),": Our mocked passport authentication strategy"),"\n"),"\n",a.createElement(t.p,null,"And our dependancies:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-js"},'"dependencies": {\n    "koa": "^2.3.0",\n    "koa-passport": "^3.0.0",\n    "koa-route": "^3.2.0",\n    "koa-session": "^5.4.0",\n    "passport-github2": "^0.1.10"\n  },\n  "devDependencies": {\n    "supertest": "^3.0.0",\n    "tape": "^4.8.0"\n  }\n')),"\n",a.createElement(t.p,null,"In the discussion that follows, I will omit some code for brevity, particularly the code that mocks a data store. Calls to ",a.createElement(t.code,null,"userStore.fetchUser()")," and ",a.createElement(t.code,null,"userStore.saveUser()")," reference functions defined in ",a.createElement(t.code,null,"util/auth.js"),"."),"\n",a.createElement(t.h2,null,"Our routes"),"\n",a.createElement(t.p,null,"The routes for this example are shown below. When we're done, we will be able to access ",a.createElement(t.code,null,"/app")," from within our tests."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-js"},"const route = require('koa-route');\n\napp.use(route.get('/auth/github',\n  passport.authenticate('github');\n));\n\n// Classic redirect behavior\napp.use(route.get('/auth/github/callback',\n  passport.authenticate('github', {\n    successRedirect: '/app',\n    failureRedirect: '/'\n  })\n));\n// Require authentication for now\napp.use(async function(ctx, next) {\n  if (ctx.isAuthenticated()) {\n    return next();\n  } else {\n    ctx.throw(403);\n  }\n});\n\napp.use(route.get('/app', function(ctx) {\n  ctx.body = ctx.state.user;\n}));\n")),"\n",a.createElement(t.h2,null,"Choose a strategy and provide a callback function"),"\n",a.createElement(t.p,null,"Inside ",a.createElement(t.code,null,"util/auth.js"),", I define a function that returns the appropriate strategy based on the ",a.createElement(t.code,null,"NODE_ENV")," environment variable."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-js"},"const passport = require('koa-passport');\nconst GitHubStrategy = require('passport-github2').Strategy;\nconst MockStrategy = require('./mock-strategy').Strategy;\nfunction strategyForEnvironment() {\n  let strategy;\n  switch(process.env.NODE_ENV) {\n    case 'production':\n      strategy = new GitHubStrategy({\n      clientID: process.env.CLIENT_ID,\n      clientSecret: process.env.CLIENT_SECRET,\n      callbackURL: process.env.CALLBACK_URL\n    }, strategyCallback);\n    break;\n    default:\n    strategy = new MockStrategy('github', strategyCallback);\n  }\n  return strategy;\n}\n")),"\n",a.createElement(t.p,null,"The callback function shown below, ",a.createElement(t.code,null,"strategyCallback()"),", is where we receive the result of the OAuth2 flow. Usually this is where you'll match the OAuth profile ID to a user in your database or create one if the user does not exist. This function is part of the normal configuration for passport and it is passed to both the ",a.createElement(t.code,null,"GitHubStrategy")," and the ",a.createElement(t.code,null,"MockStrategy"),"."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-js"},"function strategyCallback(accessToken, refreshToken, profile, done) {\n  // Possibly User.findOrCreate({…}) or similar\n  let u = {\n    id: 1,\n    oauthId: profile.id,\n    oauthProvider: profile.provider,\n    email: profile.emails[0].value,\n    username: profile.username,\n    avatarUrl: profile._json.avatar_url\n  };\n  // synchronous in this example\n  userStore.saveUser(u);\n  done(null, u);\n}\n")),"\n",a.createElement(t.p,null,"At the end of ",a.createElement(t.code,null,"util/auth.js"),", we choose our desired strategy by calling the function ",a.createElement(t.code,null,"strategyForEnvironment()")," that we defined earlier."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"passport.use(strategyForEnvironment());\n")),"\n",a.createElement(t.h2,null,"Define mock strategy"),"\n",a.createElement(t.p,null,"The mock strategy is defined using the strategy interface provided by passport. This code lives in ",a.createElement(t.code,null,"util/mock-strategy.js"),":"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-js"},"// https://github.com/marcosnils/passport-dev/blob/master/lib/strategy.js\nconst passport = require('passport-strategy');\nconst util = require('util');\n// The reply from Github OAuth2\nconst user = require('../mockProfile');\nfunction Strategy(name, strategyCallback) {\n  if (!name || name.length === 0) { throw new TypeError('DevStrategy requires a Strategy name') ; }\n  passport.Strategy.call(this);\n  this.name = name;\n  this._user = user;\n  // Callback supplied to OAuth2 strategies handling verification\n  this._cb = strategyCallback;\n}\nutil.inherits(Strategy, passport.Strategy);\nStrategy.prototype.authenticate = function() {\n  this._cb(null, null, this._user, (error, user) => {\n    this.success(user);\n  });\n}\nmodule.exports = {\n  Strategy\n};\n")),"\n",a.createElement(t.p,null,"The code above has two important purposes: It defines the constructor function for our mock strategy which accepts our ",a.createElement(t.code,null,"strategyCallback()")," function and it defines the ",a.createElement(t.code,null,"passport.authenticate()")," method used in our route for ",a.createElement(t.code,null,"/auth/github/callback")," which provides our ",a.createElement(t.code,null,"user")," object."),"\n",a.createElement(t.p,null,"The flow for this looks like this:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"A ",a.createElement(t.code,null,"GET")," request is made to ",a.createElement(t.code,null,"/auth/github/callback")),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"passport.authenticate()")," is called"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"passport.authenticate()")," calls our ",a.createElement(t.code,null,"strategyCallback()")," with a faked OAuth profile and an anonymous ",a.createElement(t.code,null,"done")," callback"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"strategyCallback()")," retrieves the correct user from a data store"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"strategyCallback()")," calls the done callback with the user object"),"\n",a.createElement(t.li,null,"The ",a.createElement(t.code,null,"done")," callback supplied to ",a.createElement(t.code,null,"strategyCallback()")," in ",a.createElement(t.code,null,"passport.authenticate()")," calls ",a.createElement(t.code,null,"this.success()")," with our user object"),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"this.success()")," performs the necessary work to populate the user session"),"\n"),"\n",a.createElement(t.p,null,"Our ",a.createElement(t.code,null,"strategyCallback()")," function defined earlier in ",a.createElement(t.code,null,"util/auth.js")," is saved to ",a.createElement(t.code,null,"this._cb")," in the ",a.createElement(t.code,null,"Strategy()")," constructor function."),"\n",a.createElement(t.p,null,"The ",a.createElement(t.code,null,"passport.authenticate()")," method is called by our route handling function for the ",a.createElement(t.code,null,"/auth/github/callback")," route. Here we call ",a.createElement(t.code,null,"this._cb")," (containing a reference to our ",a.createElement(t.code,null,"strategyCallback()"),"). As you'll recall, the function signature is ",a.createElement(t.code,null,"function strategyCallback(accessToken, refreshToken, profile, done)"),". For our mock, we don't care about ",a.createElement(t.code,null,"accessToken")," or ",a.createElement(t.code,null,"refreshToken"),", so we pass ",a.createElement(t.code,null,"null")," for both."),"\n",a.createElement(t.p,null,"We do care about ",a.createElement(t.code,null,"profile")," and ",a.createElement(t.code,null,"done"),". We mock the ",a.createElement(t.code,null,"profile")," object, in this example using my own Github profile data. We supply a callback function for done within which we call ",a.createElement(t.code,null,"this.success(user)"),". Our ",a.createElement(t.code,null,"done")," callback is how ",a.createElement(t.code,null,"strategyCallback()")," provides our final user object, the one that is serialized into the ",a.createElement(t.code,null,"ctx.state.user")," in our example Koa app."),"\n",a.createElement(t.p,null,"Whoa, that's a lot to think about!"),"\n",a.createElement(t.h2,null,"Test with sessions"),"\n",a.createElement(t.p,null,"We can now test application routes that require authentication! Let's define a few helper methods for our tests. The first helper function wires up the server and configures ",a.createElement(t.code,null,"supertest")," to work with it. We can use this function to set up a new instance of the server for each test."),"\n",a.createElement(t.p,null,"I am using ",a.createElement(t.code,null,"tape")," as the test framework, which requires any outstanding file handles to be explicitly closed. This is the purpose behind calls to ",a.createElement(t.code,null,"httpServer.close()")," that appear in the examples below."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-js"},"const prepare = () => {\n  const httpServer = app.listen();\n  const request = agent(app.callback());\n  return {\n    request,\n    httpServer\n  };\n}\n")),"\n",a.createElement(t.p,null,"The next helper, ",a.createElement(t.code,null,"createAuthenticatedUser()"),", allows us to chain requests using ",a.createElement(t.code,null,"supertest"),". It works by saving the request object to ",a.createElement(t.code,null,"authenticatedUser"),", which persists our request state for future use. First, the function authenticates the user by accessing the ",a.createElement(t.code,null,"/auth/github/callback")," route defined earlier. Then, it passes ",a.createElement(t.code,null,"authenticatedUser")," to a callback function we supply to make future requests with."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-js"},"// https://medium.com/@juha.a.hytonen/testing-authenticated-requests-with-supertest-325ccf47c2bb\nconst createAuthenticatedUser = (done) => {\n  const httpServer = app.listen();\n  const authenticatedUser = agent(app.callback());\n  authenticatedUser\n    .get('/auth/github/callback')\n    .end((error, resp) => {\n      done(authenticatedUser);\n      httpServer.close();\n  });\n}\n")),"\n",a.createElement(t.p,null,"Now you can test routes that require authentication. The test below calls ",a.createElement(t.code,null,"createAuthenticatedUser")," and passes in a callback function that receives a persisted ",a.createElement(t.code,null,"supertest")," object as its only parameter. Performing a request using this object allows the request to succeed."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-js"},"test('it should work', t => {\n  createAuthenticatedUser(request => {\n    request\n    .get('/app')\n    .expect(200)\n    .end((err, res) => {\n      console.log(res.body);\n      t.end(err);\n    });\n  });\n});\n")),"\n",a.createElement(t.p,null,"The same request without an authenticated request object will fail:"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-js"},"test('it should deny access to /app', t => {\n const {httpServer, request} = prepare();\nrequest\n  .get('/app')\n  .expect(403)\n  .end((err, res) => {\n    httpServer.close();\n    t.end(err);\n  });\n});\n")),"\n",a.createElement(t.p,null,"The entire repository (",a.createElement(t.a,{href:"https://github.com/jboxman/koa-passport-oauth2-testing"},"koa-passport-oauth2-testing"),"), with working tests, is available."),"\n",a.createElement(t.p,null,"Happy testing!"))}var c=function(e){void 0===e&&(e={});var t=Object.assign({},(0,l.ah)(),e.components).wrapper;return t?a.createElement(t,e,a.createElement(r,e)):r(e)},o=n(4765);function s(e){return a.createElement(o.Z,e,a.createElement(c,e))}o.Z},6459:function(e,t,n){function a(e){if(null==e)throw new TypeError("Cannot destructure "+e)}n.d(t,{Z:function(){return a}})}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-users-jasonb-self-repos-blog-content-posts-20170806-mocking-passport-index-mdx-9ca365dfc1e039e7c2d0.js.map