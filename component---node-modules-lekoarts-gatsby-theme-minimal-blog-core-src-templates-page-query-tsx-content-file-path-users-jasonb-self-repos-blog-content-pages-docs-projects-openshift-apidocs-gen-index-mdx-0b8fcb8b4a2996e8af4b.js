"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[512],{1873:function(e,n,t){t.d(n,{F:function(){return s},Z:function(){return u}});var l=t(6459),a=t(7294),r=t(977),i=t(9935),o=t(1131),c=t(8871),m=function(e){var n=e.data.page,t=e.children;return(0,r.tZ)(o.Z,null,(0,r.tZ)(i.X6,{as:"h1",variant:"styles.h1"},n.title),(0,r.tZ)("section",{sx:{my:5,variant:"layout.content"}},t))},s=function(e){var n=e.data.page;return(0,r.tZ)(c.Z,{title:n.title,description:n.excerpt})};function u(e){var n=Object.assign({},((0,l.Z)(e),e));return a.createElement(m,n)}},8871:function(e,n,t){var l=t(7294),a=t(1082),r=t(4232);n.Z=function(e){var n=e.title,t=void 0===n?"":n,i=e.description,o=void 0===i?"":i,c=e.pathname,m=void 0===c?"":c,s=e.image,u=void 0===s?"":s,p=e.children,d=void 0===p?null:p,h=e.canonicalUrl,f=void 0===h?"":h,E=(0,r.Z)(),g=E.siteTitle,y=E.siteTitleAlt,v=E.siteUrl,w=E.siteDescription,b=E.siteImage,A=E.author,P={title:t?t+" | "+g:y,description:o||w,url:""+v+(m||""),image:""+v+(u||b)};return l.createElement(l.Fragment,null,l.createElement("title",null,P.title),l.createElement("meta",{name:"description",content:P.description}),l.createElement("meta",{name:"image",content:P.image}),l.createElement("meta",{property:"og:title",content:P.title}),l.createElement("meta",{property:"og:url",content:P.url}),l.createElement("meta",{property:"og:description",content:P.description}),l.createElement("meta",{property:"og:image",content:P.image}),l.createElement("meta",{property:"og:type",content:"website"}),l.createElement("meta",{property:"og:image:alt",content:P.description}),l.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),l.createElement("meta",{name:"twitter:title",content:P.title}),l.createElement("meta",{name:"twitter:url",content:P.url}),l.createElement("meta",{name:"twitter:description",content:P.description}),l.createElement("meta",{name:"twitter:image",content:P.image}),l.createElement("meta",{name:"twitter:image:alt",content:P.description}),l.createElement("meta",{name:"twitter:creator",content:A}),l.createElement("meta",{name:"gatsby-theme",content:"@lekoarts/gatsby-theme-minimal-blog"}),l.createElement("link",{rel:"icon",type:"image/png",sizes:"32x32",href:(0,a.withPrefix)("/favicon-32x32.png")}),l.createElement("link",{rel:"icon",type:"image/png",sizes:"16x16",href:(0,a.withPrefix)("/favicon-16x16.png")}),l.createElement("link",{rel:"apple-touch-icon",sizes:"180x180",href:(0,a.withPrefix)("/apple-touch-icon.png")}),f?l.createElement("link",{rel:"canonical",href:f}):null,d)}},6859:function(e,n,t){t.r(n),t.d(n,{Head:function(){return o.F},default:function(){return c}});var l=t(7294),a=t(9626);function r(e){var n=Object.assign({p:"p",a:"a",h2:"h2",pre:"pre",code:"code",em:"em",ul:"ul",li:"li",ol:"ol"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"This tool generates documentation for the\n",l.createElement(n.a,{href:"https://www.openshift.com/"},"OpenShift")," OpenAPI specification for a running a\ncluster. The APIs included in the OpenAPI spec file are specific to the cluster\nfrom which the spec originates."),"\n",l.createElement(n.p,null,"(If you want to immediately access the ",l.createElement(n.a,{href:"https://docs.openshift.com/container-platform/4.11/rest_api/index.html"},"OpenShift API reference\ndocumentation"),",\nit is available as part of the official ",l.createElement(n.a,{href:"https://docs.openshift.com"},"OpenShift Container\nPlatform")," documentation.)"),"\n",l.createElement(n.h2,null,"Configuration format"),"\n",l.createElement(n.p,null,"The configuration supports the following keys.\nOnly uncommented keys are supported in the current release."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-yaml"},"version: 2\noutputDir: build\n#apisToHide: []\napiMap: []\n")),"\n",l.createElement(n.p,null,"The ",l.createElement(n.code,null,"apiMap")," key specifies an array of nested objects defining OpenShift APIs,\nwith each object describing a related set of APIs."),"\n",l.createElement(n.p,null,"Every key is required."),"\n",l.createElement(n.p,null,"The values for the keys ",l.createElement(n.code,null,"kind"),", ",l.createElement(n.code,null,"group"),", and ",l.createElement(n.code,null,"version")," are found in the output\nof ",l.createElement(n.code,null,"oc api-resources")," on recent versions of OpenShift based on Kubernetes v1.20.\nFor 'core' APIs, such as the Pod API, no group is specified as the group\ninternally is empty."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-yaml"},"- name: Authorization APIs\n  resources:\n  - kind: LocalResourceAccessReview\n    group: authorization.openshift.io\n    version: v1\n- name: Autoscale APIs\n  resources:\n  - kind: ClusterAutoscaler\n    group: autoscaling.openshift.io\n    version: v1\n")),"\n",l.createElement(n.h2,null,"How to install"),"\n",l.createElement(n.p,null,"This tool is written in JavaScript and depends on Node.js to run."),"\n",l.createElement(n.p,null,l.createElement(n.em,null,"Prerequisites")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://nodejs.org/en/"},"NodeJS")," >= 12"),"\n"),"\n",l.createElement(n.p,null,l.createElement(n.em,null,"Procedure")),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"npm i -g @jboxman/openshift-apidocs-gen\n")),"\n",l.createElement(n.h2,null,"CLI help"),"\n",l.createElement(n.p,null,"A list of commands and expected parameters is available from the tool itself:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"openshift-apidocs-gen --help\nUsage: openshift-apidocs-gen [options] [command]\n\nOptions:\n  -h, --help                          display help for command\n\nCommands:\n  build [options] <oApiSpecFile>      Build the AsciiDoc source for the OpenShift API reference documentation\n  topic-map [options]                 Output YAML to stdout suitable for inclusion in an AsciiBinder _topic_map.yml file\n  changelog [options] <oApiSpecFile>  Output a changelog to stdout for an `apiMap`\n  create-resources <oApiSpecFile>     Output an `apiMap` array in YAML to stdout\n  help [command]                      display help for command\n")),"\n",l.createElement(n.h2,null,"Typical usage"),"\n",l.createElement(n.p,null,"The following procedure reflects typical usage. For each new release of\nOpenShift, the ",l.createElement(n.code,null,"apiMap")," must be adjusted accordingly as APIs are added and API\nversions incremented, or APIs are dropped."),"\n",l.createElement(n.p,null,l.createElement(n.em,null,"Prerequisites")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://asciidoctor.org"},"Asciidoctor")),"\n",l.createElement(n.li,null,l.createElement(n.code,null,"jq")," ",l.createElement(n.a,{href:"https://stedolan.github.io/jq/"},"binary")),"\n"),"\n",l.createElement(n.p,null,l.createElement(n.em,null,"Procedure")),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,"Log in to an OpenShift cluster with ",l.createElement(n.code,null,"cluster-admin")," privileges."),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,"Run ",l.createElement(n.code,null,"oc get --raw /openapi/v2 | jq . > openapi.json"),"."),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,"Create an empty configuration:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,'echo "version: 2\noutputDir: build\napisToHide: []\napiMap:" > config.yaml\n')),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,"Generate an API map:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"openshift-apidocs-gen create-resources openapi.json >> config.yaml\n")),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,"Generate the API docs:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"openshift-apidocs-gen build -c config.yaml openapi.json\n")),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,"Build the HTML documentation, such as with the following command:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"find build -type f -name '*.adoc' | xargs -L1 -I^ -P1 asciidoctor -a toc -d book ^\n")),"\n"),"\n"),"\n",l.createElement(n.h2,null,"Known issues"),"\n",l.createElement(n.p,null,"For known issues, refer to\n",l.createElement(n.a,{href:"https://github.com/jboxman/openshift-apidocs-gen/issues"},"GitHub"),"."))}var i=function(e){void 0===e&&(e={});var n=Object.assign({},(0,a.ah)(),e.components).wrapper;return n?l.createElement(n,e,l.createElement(r,e)):r(e)},o=t(1873);function c(e){return l.createElement(o.Z,e,l.createElement(i,e))}o.Z},6459:function(e,n,t){function l(e){if(null==e)throw new TypeError("Cannot destructure "+e)}t.d(n,{Z:function(){return l}})}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx-content-file-path-users-jasonb-self-repos-blog-content-pages-docs-projects-openshift-apidocs-gen-index-mdx-0b8fcb8b4a2996e8af4b.js.map