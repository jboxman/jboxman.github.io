"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[353],{1873:function(e,n,t){t.d(n,{F:function(){return s},Z:function(){return u}});var l=t(6459),a=t(7294),i=t(977),r=t(9935),o=t(1131),c=t(8871),m=function(e){var n=e.data.page,t=e.children;return(0,i.tZ)(o.Z,null,(0,i.tZ)(r.X6,{as:"h1",variant:"styles.h1"},n.title),(0,i.tZ)("section",{sx:{my:5,variant:"layout.content"}},t))},s=function(e){var n=e.data.page;return(0,i.tZ)(c.Z,{title:n.title,description:n.excerpt})};function u(e){var n=Object.assign({},((0,l.Z)(e),e));return a.createElement(m,n)}},8871:function(e,n,t){var l=t(7294),a=t(1082),i=t(4232);n.Z=function(e){var n=e.title,t=void 0===n?"":n,r=e.description,o=void 0===r?"":r,c=e.pathname,m=void 0===c?"":c,s=e.image,u=void 0===s?"":s,p=e.children,d=void 0===p?null:p,g=e.canonicalUrl,h=void 0===g?"":g,f=(0,i.Z)(),E=f.siteTitle,y=f.siteTitleAlt,x=f.siteUrl,b=f.siteDescription,w=f.siteImage,v=f.author,j={title:t?t+" | "+E:y,description:o||b,url:""+x+(m||""),image:""+x+(u||w)};return l.createElement(l.Fragment,null,l.createElement("title",null,j.title),l.createElement("meta",{name:"description",content:j.description}),l.createElement("meta",{name:"image",content:j.image}),l.createElement("meta",{property:"og:title",content:j.title}),l.createElement("meta",{property:"og:url",content:j.url}),l.createElement("meta",{property:"og:description",content:j.description}),l.createElement("meta",{property:"og:image",content:j.image}),l.createElement("meta",{property:"og:type",content:"website"}),l.createElement("meta",{property:"og:image:alt",content:j.description}),l.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),l.createElement("meta",{name:"twitter:title",content:j.title}),l.createElement("meta",{name:"twitter:url",content:j.url}),l.createElement("meta",{name:"twitter:description",content:j.description}),l.createElement("meta",{name:"twitter:image",content:j.image}),l.createElement("meta",{name:"twitter:image:alt",content:j.description}),l.createElement("meta",{name:"twitter:creator",content:v}),l.createElement("meta",{name:"gatsby-theme",content:"@lekoarts/gatsby-theme-minimal-blog"}),l.createElement("link",{rel:"icon",type:"image/png",sizes:"32x32",href:(0,a.withPrefix)("/favicon-32x32.png")}),l.createElement("link",{rel:"icon",type:"image/png",sizes:"16x16",href:(0,a.withPrefix)("/favicon-16x16.png")}),l.createElement("link",{rel:"apple-touch-icon",sizes:"180x180",href:(0,a.withPrefix)("/apple-touch-icon.png")}),h?l.createElement("link",{rel:"canonical",href:h}):null,d)}},1838:function(e,n,t){t.r(n),t.d(n,{Head:function(){return o.F},default:function(){return c}});var l=t(7294),a=t(9626);function i(e){var n=Object.assign({p:"p",a:"a",h2:"h2",code:"code",ul:"ul",li:"li",pre:"pre"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"Proof of concept integrating ",l.createElement(n.a,{href:"https://www.digikam.org"},"digiKam")," and ",l.createElement(n.a,{href:"https://git-annex.branchable.com"},"git-annex"),"."),"\n",l.createElement(n.p,null,l.createElement(n.a,{href:"https://github.com/jboxman/dam"},"Available on GitHub")),"\n",l.createElement(n.h2,null,"Purpose"),"\n",l.createElement(n.p,null,"Because of how ",l.createElement(n.code,null,"git-annex")," works, it isn't practical to use the working directory with digiKam:"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Leaving all files in the ",l.createElement(n.code,null,"git-annex")," repo unlocked doubles disk space usage, and using ",l.createElement(n.code,null,"thin")," mode instead puts data at risk."),"\n",l.createElement(n.li,null,"If the files are locked, digiKam cannot save XMP sidecar files; digiKam resolves symlinks, but ",l.createElement(n.code,null,"git-annex")," does not allow files to be created in the ",l.createElement(n.code,null,".git/annex")," directory."),"\n"),"\n",l.createElement(n.p,null,"So this proof of concept implements a bi-directional sync between two directory trees."),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.code,null,"stagingDir"),": Directory of the ",l.createElement(n.code,null,"git")," repo configured with ",l.createElement(n.code,null,"git-annex")),"\n",l.createElement(n.li,null,l.createElement(n.code,null,"digikamDir"),": Directory for digiKam files, including the SQLite database"),"\n"),"\n",l.createElement(n.p,null,"Additionally, the PoC implements:"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Ingest image files into ",l.createElement(n.code,null,"photographers/<USER>/YYYY/MM/DD")),"\n",l.createElement(n.li,null,"Apply copyright metadata assignment to JPEG and NEF files"),"\n",l.createElement(n.li,null,"Apply image (JPEG) data rotation, with EXIF orientation reset"),"\n"),"\n",l.createElement(n.p,null,"Because digiKam is best for organizing photos, all tagging is managed there. So once ingested, the files are never moved or renamed again."),"\n",l.createElement(n.p,null,"This is a working PoC. It includes limited error checks and no unit tests, so use at your own risk. But you're already managing your photos with ",l.createElement(n.code,null,"git-annex"),", with data replicated to multiple storage devices anyway, right?"),"\n",l.createElement(n.h2,null,"Commands"),"\n",l.createElement(n.p,null,"The following commands are available:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"dam --help\nUsage: dam [options] [command]\n\nOptions:\n  -h, --help                             output usage information\n\nCommands:\n  what-can <photo-dir>                   List valid actions for a dir\n  ingest [options] <photo-dir>           Move files into staging directory\n  apply-copyright [options] <photo-dir>  Apply copyright to images\n  apply-rotation [options] <photo-dir>   Rotate images and reset EXIF orientation flag\n  sync [options]                         Sync data between photo and digiKam directories\n  cleanup [options] <photo-dir>          Clean up backup files\n  compare <source-dir> <target-dir>      Compare files in <source-dir> and <target-dir>\n  rm-rejected [options]                  (not implemented) Remove files marked as rejected by digiKam\n")),"\n",l.createElement(n.h2,null,"Configuration"),"\n",l.createElement(n.p,null,"The configuration file lives in ",l.createElement(n.code,null,"~/.dam"),"."),"\n",l.createElement(n.p,null,"Defaults:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"const defaultUser = process.env['USER'];\nconst defaultUserDir = process.env['HOME'];\nconst configDir = path.join(defaultUserDir, '.dam');\nconst configFile = path.join(configDir, 'config.json');\nconst exiftoolConfigFile = path.join(configDir, 'exiftool.conf');\n\n")),"\n",l.createElement(n.p,null,"Defaults:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"  const defaultConfig = {\n    defaultUser,\n    stagingDir: path.join(defaultUserDir, `Self/repos/photos/photographers`),\n    digikamDir: path.join(defaultUserDir, `Self/repos/photos-dk/photographers`),\n    photographers: {\n      [defaultUser]: {\n        copyrightArgs: path.join(configDir, `${defaultUser}-copyright.conf`)\n      }\n    }\n  };\n\n")),"\n",l.createElement(n.p,null,"Example configuration for ",l.createElement(n.a,{href:"https://exiftool.org"},"ExifTool"),". The user defined ",l.createElement(n.code,null,"MySequenceNum")," is used to create a unique filename for each image when ingesting."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-perl"},"%Image::ExifTool::UserDefined = (\n  # For XMP files, digiKam expects FILENAME.EXT.XMP\n  'Image::ExifTool::Composite' => {\n    Extension => {\n      Require => {\n        0 => 'FileName',\n      },\n      ValueConv => sub {\n        my $val = shift;\n        my $fn = @$val[0];\n\n        if($fn =~ /(\\.[^.]+)(\\.xmp)\\z/) {\n          return $1;\n        }\n        return \"\";\n      },\n    },\n\n    MySequenceNum => {\n      Desire => {\n        0 => 'FileNumber',\n        1 => 'DirectoryNumber',\n        2 => 'Model',\n      },\n      ValueConv => sub {\n        my $val = shift;\n        my $sep = '-';\n        my ($fileno, $dirno, $model) = @$val;\n\n        # These lack a sequence number at all.\n        # With the model # may not need this.\n        #if($model =~ /Nexus 4/) { return '0' x 7; }\n        #if($model =~ /COOLPIX P100/) { return '0' x 7; }\n        #if($model =~ /PowerShot A60/) { return $sep . $fileno; }\n        if($model =~ /NIKON D3100/) {\n          return sprintf('%s%03d%04d' , $sep, $dirno, $fileno);\n        }\n\n        return \"\";\n      },\n    },\n\n  },\n);\n")),"\n",l.createElement(n.h2,null,"Examples"),"\n",l.createElement(n.p,null,"Example of the annex repo:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"── photographers\n   ├── jasonb\n   │   ├── 2004\n   │   │   ├── 06\n   │   │   │   ├── 16\n   │   │   │   │   ├── 20040616-004528.jpg -> ../../../../../.git/annex/objects/xG/32/WORM-s256444-m1087361128--photographers%jboxman%2004%06%16%20040616-004528.jpg/WORM-s256444-m1087361128--photographers%jboxman%2004%06%16%20040616-004528.jpg\n   │   │   │   │   ├── 20040616-004528.jpg.json\n   │   │   │   │   └── 20040616-004528.jpg.xmp\n")),"\n",l.createElement(n.p,null,"Example of the digiKam repo:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"── db\n│   ├── digikam4.db\n│   ├── recognition.db\n│   ├── similarity.db\n│   └── thumbnails-digikam.db\n── photographers\n    └── jasonb\n        ├── 2004\n        │   ├── 06\n        │   │   ├── 16\n        │   │   │   ├── 20040616-004528.jpg\n        │   │   │   └── 20040616-004528.jpg.xmp\n")),"\n",l.createElement(n.h2,null,"Known issues"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"When ",l.createElement(n.code,null,"exiftool")," exits with a nonzero code, the error is not handled usefully"),"\n",l.createElement(n.li,null,"When renaming files with ",l.createElement(n.code,null,"exiftool"),", a filename collision causes an error"),"\n"),"\n",l.createElement(n.h2,null,"TODO"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Cleanup code"),"\n",l.createElement(n.li,null,"Add what-config to expose the runtime configuration"),"\n"))}var r=function(e){void 0===e&&(e={});var n=Object.assign({},(0,a.ah)(),e.components).wrapper;return n?l.createElement(n,e,l.createElement(i,e)):i(e)},o=t(1873);function c(e){return l.createElement(o.Z,e,l.createElement(r,e))}o.Z},6459:function(e,n,t){function l(e){if(null==e)throw new TypeError("Cannot destructure "+e)}t.d(n,{Z:function(){return l}})}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx-content-file-path-users-jasonb-self-repos-blog-content-pages-docs-projects-dam-index-mdx-8e9e3b897153374e6ad0.js.map